@page "/"

<PageTitle>BlackJack</PageTitle>

<h1>BlazorでBlackjack作ってみる</h1>

<p class="text-center">↓↓  ボタンを押してゲームスタート!!  ↓↓</p>
<div class="text-center">
  <button class="btn btn-danger mb-5" @onclick="StartNewGame">ゲーム開始</button>
</div>
<div class="container mt-3">
  <div class="row">
    <div class="col">
      <p class="h3">ディーラー: @string.Join(", ", dealerCards)</p>
    </div>
    <div class="col">
      <p class="h3">あなた: @string.Join(", ", playerCards)</p>
    </div>
  </div>
</div>




  @if (hitFlag)
    {
    <div class="text-center mt-5">
      <button class="btn btn-primary" @onclick="Hit">ヒット</button>
      <button class="btn btn-warning" @onclick="Stand">スタンド</button>
    </div>

    }

 <p class="h4 mt-5">あなたの合計: @playerTotal</p>

 @if(resultFlag)
  {
  <div class="h1 mt-5 center-block" >結果: @resultMessage</div>
 }

@code {
    List<int> deck = new List<int>();
    List<int> dealerCards = new List<int>();
    List<int> playerCards = new List<int>();
    int playerTotal;


   string resultMessage = "";
   bool hitFlag = false;

   bool resultFlag = false;

    void StartNewGame()
    {
      resultMessage = "";
      hitFlag = true;
      resultFlag = false;
        deck = GenerateDeck();
        ShuffleDeck(deck);
        dealerCards = new List<int> { DrawCard(deck), DrawCard(deck) };
        playerCards = new List<int> { DrawCard(deck), DrawCard(deck) };
        playerTotal = CalculateTotal(playerCards);
    }

    void Hit()
    {
        playerCards.Add(DrawCard(deck));
        playerTotal = CalculateTotal(playerCards);
    }

    void Stand()
    {
        hitFlag = false;
        resultFlag = true;
        while (CalculateTotal(dealerCards) < 17)
        { 
            dealerCards.Add(DrawCard(deck));
        }
        int dealerTotal = CalculateTotal(dealerCards);
        int playerTotal = CalculateTotal(playerCards);
        if (dealerTotal > 21 && playerTotal > 21 || dealerTotal == playerTotal)
        {
           resultMessage = "引き分けです";
        }
        else if (dealerTotal > 21 && dealerTotal > playerTotal || playerTotal > 21)
        {
          resultMessage = "あなたの負けです";
        }
        else
        {
           resultMessage = "あなたの勝ちです";
        }
    }

    List<int> GenerateDeck()
    {
        List<int> deck = new List<int>();
        for (int i = 1; i <= 13; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                deck.Add(i);
            }
        }
        return deck;
    }

    void ShuffleDeck(List<int> deck)
    {
        Random rng = new Random();
        int n = deck.Count;
        while (n > 1)
        {
            n--;
            int k = rng.Next(n + 1);
            int value = deck[k];
            deck[k] = deck[n];
            deck[n] = value;
        }
    }

    int DrawCard(List<int> deck)
    {
        int card = deck[0];
        deck.RemoveAt(0);
        return card;
    }

    int CalculateTotal(List<int> cards)
    {
        int total = 0;
        int aces = 0;
        foreach (int card in cards)
        {
            if (card == 1)
            {
                aces++;
                total += 11;
            }
            else if (card >= 10)
            {
                total += 10;
            }
            else
            {
                total += card;
            }
        }
        while (total > 21 && aces > 0)
        {
            total -= 10;
            aces--;
        }
        return total;
    }
}
